0.3
- Renamed KeyValue to IniKeyValue, and it is now generic so it can accept a List of strings.
- Added IniValue which doesn't hold the key, only the value and comments.
- IniStreamSectionReader has both NextSection and NextSectionAsync now. Consequently its API has changed, since async methods cannot have out parameters.
- IniError indicates that Msg can be null, which is the case for the default value.
- Added IniDictionaryReader which can load an IniStreamReader into a dictionary, keyed by strings.

0.4
- net6.0, net7.0, and .netstandard2.0 are supported in addition to net8.0.

0.5
- IniValueAcceptors accept the section and key, to provide better error messages
- IniValueAcceptors have convenience methods for getting a default value or throwing an exception
- IniStreamReader can be configured to trim section, key, and value content

0.6
- Support for escape sequences added, both reading and writing
- Trimming strings is supported by IniSpanReader
- Renamed HaveValue to HasValue to be consistent with .NET
- Empty section names are disallowed on parsing

0.7
- The Key property of IIniValueAcceptors is now immutable, and set on construction
- Nullability annotation for IniError.ToString() fixed; it never returned null
- IniTextEscaperWriter made a static class, which just holds helper methods for using an IIniTextEscaper
- net9.0 target added



TODO
We have to allow writing Values with line continuations in them.


We need to be consistent across all calls. Ideally...
#1 We want to issue an error as soon as possible
#2 Ideally we do not want to issue any 0-length content of Key/Value/Section/Comment, unless it logically makes sense to do so (Empty values, sections, and comments may be legal in some cases. Empty keys are never legal.). But this is not as big of a deal as they don't do much harm.

Try to get rid of any 0-length strings issued with error. Perhaps try using contentBuilder instead.